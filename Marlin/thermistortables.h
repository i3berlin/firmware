#ifndef THERMISTORTABLES_H_
#define THERMISTORTABLES_H_

#include "Marlin.h"

#define OVERSAMPLENR 16

#if (THERMISTORHEATER_0 == 1) || (THERMISTORHEATER_1 == 1)  || (THERMISTORHEATER_2 == 1) || (THERMISTORBED == 1) //100k bed thermistor

const short temptable_1[][2] PROGMEM = {
{       23*OVERSAMPLENR ,       300     },
{       25*OVERSAMPLENR ,       295     },
{       27*OVERSAMPLENR ,       290     },
{       28*OVERSAMPLENR ,       285     },
{       31*OVERSAMPLENR ,       280     },
{       33*OVERSAMPLENR ,       275     },
{       35*OVERSAMPLENR ,       270     },
{       38*OVERSAMPLENR ,       265     },
{       41*OVERSAMPLENR ,       260     },
{       44*OVERSAMPLENR ,       255     },
{       48*OVERSAMPLENR ,       250     },
{       52*OVERSAMPLENR ,       245     },
{       56*OVERSAMPLENR ,       240     },
{       61*OVERSAMPLENR ,       235     },
{       66*OVERSAMPLENR ,       230     },
{       71*OVERSAMPLENR ,       225     },
{       78*OVERSAMPLENR ,       220     },
{       84*OVERSAMPLENR ,       215     },
{       92*OVERSAMPLENR ,       210     },
{       100*OVERSAMPLENR        ,       205     },
{       109*OVERSAMPLENR        ,       200     },
{       120*OVERSAMPLENR        ,       195     },
{       131*OVERSAMPLENR        ,       190     },
{       143*OVERSAMPLENR        ,       185     },
{       156*OVERSAMPLENR        ,       180     },
{       171*OVERSAMPLENR        ,       175     },
{       187*OVERSAMPLENR        ,       170     },
{       205*OVERSAMPLENR        ,       165     },
{       224*OVERSAMPLENR        ,       160     },
{       245*OVERSAMPLENR        ,       155     },
{       268*OVERSAMPLENR        ,       150     },
{       293*OVERSAMPLENR        ,       145     },
{       320*OVERSAMPLENR        ,       140     },
{       348*OVERSAMPLENR        ,       135     },
{       379*OVERSAMPLENR        ,       130     },
{       411*OVERSAMPLENR        ,       125     },
{       445*OVERSAMPLENR        ,       120     },
{       480*OVERSAMPLENR        ,       115     },
{       516*OVERSAMPLENR        ,       110     },
{       553*OVERSAMPLENR        ,       105     },
{       591*OVERSAMPLENR        ,       100     },
{       628*OVERSAMPLENR        ,       95      },
{       665*OVERSAMPLENR        ,       90      },
{       702*OVERSAMPLENR        ,       85      },
{       737*OVERSAMPLENR        ,       80      },
{       770*OVERSAMPLENR        ,       75      },
{       801*OVERSAMPLENR        ,       70      },
{       830*OVERSAMPLENR        ,       65      },
{       857*OVERSAMPLENR        ,       60      },
{       881*OVERSAMPLENR        ,       55      },
{       903*OVERSAMPLENR        ,       50      },
{       922*OVERSAMPLENR        ,       45      },
{       939*OVERSAMPLENR        ,       40      },
{       954*OVERSAMPLENR        ,       35      },
{       966*OVERSAMPLENR        ,       30      },
{       977*OVERSAMPLENR        ,       25      },
{       985*OVERSAMPLENR        ,       20      },
{       993*OVERSAMPLENR        ,       15      },
{       999*OVERSAMPLENR        ,       10      },
{       1004*OVERSAMPLENR       ,       5       },
{       1008*OVERSAMPLENR       ,       0       } //safety
};
#endif
#if (THERMISTORHEATER_0 == 2) || (THERMISTORHEATER_1 == 2) || (THERMISTORHEATER_2 == 2) || (THERMISTORBED == 2) //200k bed thermistor
const short temptable_2[][2] PROGMEM = {
//200k ATC Semitec 204GT-2
//Verified by linagee. Source: http://shop.arcol.hu/static/datasheets/thermistors.pdf
// Calculated using 4.7kohm pullup, voltage divider math, and manufacturer provided temp/resistance
   {1*OVERSAMPLENR, 848},
   {30*OVERSAMPLENR, 300}, //top rating 300C
   {34*OVERSAMPLENR, 290},
   {39*OVERSAMPLENR, 280},
   {46*OVERSAMPLENR, 270},
   {53*OVERSAMPLENR, 260},
   {63*OVERSAMPLENR, 250},
   {74*OVERSAMPLENR, 240},
   {87*OVERSAMPLENR, 230},
   {104*OVERSAMPLENR, 220},
   {124*OVERSAMPLENR, 210},
   {148*OVERSAMPLENR, 200},
   {176*OVERSAMPLENR, 190},
   {211*OVERSAMPLENR, 180},
   {252*OVERSAMPLENR, 170},
   {301*OVERSAMPLENR, 160},
   {357*OVERSAMPLENR, 150},
   {420*OVERSAMPLENR, 140},
   {489*OVERSAMPLENR, 130},
   {562*OVERSAMPLENR, 120},
   {636*OVERSAMPLENR, 110},
   {708*OVERSAMPLENR, 100},
   {775*OVERSAMPLENR, 90},
   {835*OVERSAMPLENR, 80},
   {884*OVERSAMPLENR, 70},
   {924*OVERSAMPLENR, 60},
   {955*OVERSAMPLENR, 50},
   {977*OVERSAMPLENR, 40},
   {993*OVERSAMPLENR, 30},
   {1004*OVERSAMPLENR, 20},
   {1012*OVERSAMPLENR, 10},
   {1016*OVERSAMPLENR, 0},
};

#endif
#if (THERMISTORHEATER_0 == 3) || (THERMISTORHEATER_1 == 3) || (THERMISTORHEATER_2 == 3) || (THERMISTORBED == 3) //mendel-parts
const short temptable_3[][2] PROGMEM = {
                {1*OVERSAMPLENR,864},
                {21*OVERSAMPLENR,300},
                {25*OVERSAMPLENR,290},
                {29*OVERSAMPLENR,280},
                {33*OVERSAMPLENR,270},
                {39*OVERSAMPLENR,260},
                {46*OVERSAMPLENR,250},
                {54*OVERSAMPLENR,240},
                {64*OVERSAMPLENR,230},
                {75*OVERSAMPLENR,220},
                {90*OVERSAMPLENR,210},
                {107*OVERSAMPLENR,200},
                {128*OVERSAMPLENR,190},
                {154*OVERSAMPLENR,180},
                {184*OVERSAMPLENR,170},
                {221*OVERSAMPLENR,160},
                {265*OVERSAMPLENR,150},
                {316*OVERSAMPLENR,140},
                {375*OVERSAMPLENR,130},
                {441*OVERSAMPLENR,120},
                {513*OVERSAMPLENR,110},
                {588*OVERSAMPLENR,100},
                {734*OVERSAMPLENR,80},
                {856*OVERSAMPLENR,60},
                {938*OVERSAMPLENR,40},
                {986*OVERSAMPLENR,20},
                {1008*OVERSAMPLENR,0},
                {1018*OVERSAMPLENR,-20}
        };

#endif
#if (THERMISTORHEATER_0 == 4) || (THERMISTORHEATER_1 == 4) || (THERMISTORHEATER_2 == 4) || (THERMISTORBED == 4) //10k thermistor
const short temptable_4[][2] PROGMEM = {
   {1*OVERSAMPLENR, 430},
   {54*OVERSAMPLENR, 137},
   {107*OVERSAMPLENR, 107},
   {160*OVERSAMPLENR, 91},
   {213*OVERSAMPLENR, 80},
   {266*OVERSAMPLENR, 71},
   {319*OVERSAMPLENR, 64},
   {372*OVERSAMPLENR, 57},
   {425*OVERSAMPLENR, 51},
   {478*OVERSAMPLENR, 46},
   {531*OVERSAMPLENR, 41},
   {584*OVERSAMPLENR, 35},
   {637*OVERSAMPLENR, 30},
   {690*OVERSAMPLENR, 25},
   {743*OVERSAMPLENR, 20},
   {796*OVERSAMPLENR, 14},
   {849*OVERSAMPLENR, 7},
   {902*OVERSAMPLENR, 0},
   {955*OVERSAMPLENR, -11},
   {1008*OVERSAMPLENR, -35}
};
#endif

#if (THERMISTORHEATER_0 == 5) || (THERMISTORHEATER_1 == 5) || (THERMISTORHEATER_2 == 5) || (THERMISTORBED == 5) //100k ParCan thermistor (104GT-2)
const short temptable_5[][2] PROGMEM = {
// ATC Semitec 104GT-2 (Used in ParCan)
// Verified by linagee. Source: http://shop.arcol.hu/static/datasheets/thermistors.pdf
// Calculated using 4.7kohm pullup, voltage divider math, and manufacturer provided temp/resistance
   {1*OVERSAMPLENR, 713},
   {17*OVERSAMPLENR, 300}, //top rating 300C
   {20*OVERSAMPLENR, 290},
   {23*OVERSAMPLENR, 280},
   {27*OVERSAMPLENR, 270},
   {31*OVERSAMPLENR, 260},
   {37*OVERSAMPLENR, 250},
   {43*OVERSAMPLENR, 240},
   {51*OVERSAMPLENR, 230},
   {61*OVERSAMPLENR, 220},
   {73*OVERSAMPLENR, 210},
   {87*OVERSAMPLENR, 200},
   {106*OVERSAMPLENR, 190},
   {128*OVERSAMPLENR, 180},
   {155*OVERSAMPLENR, 170},
   {189*OVERSAMPLENR, 160},
   {230*OVERSAMPLENR, 150},
   {278*OVERSAMPLENR, 140},
   {336*OVERSAMPLENR, 130},
   {402*OVERSAMPLENR, 120},
   {476*OVERSAMPLENR, 110},
   {554*OVERSAMPLENR, 100},
   {635*OVERSAMPLENR, 90},
   {713*OVERSAMPLENR, 80},
   {784*OVERSAMPLENR, 70},
   {846*OVERSAMPLENR, 60},
   {897*OVERSAMPLENR, 50},
   {937*OVERSAMPLENR, 40},
   {966*OVERSAMPLENR, 30},
   {986*OVERSAMPLENR, 20},
   {1000*OVERSAMPLENR, 10},
   {1010*OVERSAMPLENR, 0}
};
#endif

#if (THERMISTORHEATER_0 == 6) || (THERMISTORHEATER_1 == 6) || (THERMISTORHEATER_2 == 6) || (THERMISTORBED == 6) // 100k Epcos thermistor
const short temptable_6[][2] PROGMEM = {
   {1*OVERSAMPLENR, 350},
   {28*OVERSAMPLENR, 250}, //top rating 250C
   {31*OVERSAMPLENR, 245},
   {35*OVERSAMPLENR, 240},
   {39*OVERSAMPLENR, 235},
   {42*OVERSAMPLENR, 230},
   {44*OVERSAMPLENR, 225},
   {49*OVERSAMPLENR, 220},
   {53*OVERSAMPLENR, 215},
   {62*OVERSAMPLENR, 210},
   {71*OVERSAMPLENR, 205}, //fitted graphically
   {78*OVERSAMPLENR, 200}, //fitted graphically
   {94*OVERSAMPLENR, 190},
   {102*OVERSAMPLENR, 185},
   {116*OVERSAMPLENR, 170},
   {143*OVERSAMPLENR, 160},
   {183*OVERSAMPLENR, 150},
   {223*OVERSAMPLENR, 140},
   {270*OVERSAMPLENR, 130},
   {318*OVERSAMPLENR, 120},
   {383*OVERSAMPLENR, 110},
   {413*OVERSAMPLENR, 105},
   {439*OVERSAMPLENR, 100},
   {484*OVERSAMPLENR, 95},
   {513*OVERSAMPLENR, 90},
   {607*OVERSAMPLENR, 80},
   {664*OVERSAMPLENR, 70},
   {781*OVERSAMPLENR, 60},
   {810*OVERSAMPLENR, 55},
   {849*OVERSAMPLENR, 50},
   {914*OVERSAMPLENR, 45},
   {914*OVERSAMPLENR, 40},
   {935*OVERSAMPLENR, 35},
   {954*OVERSAMPLENR, 30},
   {970*OVERSAMPLENR, 25},
   {978*OVERSAMPLENR, 22},
   {1008*OVERSAMPLENR, 3},
   {1023*OVERSAMPLENR, 0}  //to allow internal 0ï¿½C
};
#endif

#if (THERMISTORHEATER_0 == 7) || (THERMISTORHEATER_1 == 7) || (THERMISTORHEATER_2 == 7) || (THERMISTORBED == 7) // 100k Honeywell 135-104LAG-J01
const short temptable_7[][2] PROGMEM = {
   {1*OVERSAMPLENR, 500},
   {46*OVERSAMPLENR, 270}, //top rating 300C
   {50*OVERSAMPLENR, 265},
   {54*OVERSAMPLENR, 260},
   {58*OVERSAMPLENR, 255},
   {62*OVERSAMPLENR, 250},
   {67*OVERSAMPLENR, 245},
   {72*OVERSAMPLENR, 240},
   {79*OVERSAMPLENR, 235},
   {85*OVERSAMPLENR, 230},
   {91*OVERSAMPLENR, 225},
   {99*OVERSAMPLENR, 220},
   {107*OVERSAMPLENR, 215},
   {116*OVERSAMPLENR, 210},
   {126*OVERSAMPLENR, 205},
   {136*OVERSAMPLENR, 200},
   {149*OVERSAMPLENR, 195},
   {160*OVERSAMPLENR, 190},
   {175*OVERSAMPLENR, 185},
   {191*OVERSAMPLENR, 180},
   {209*OVERSAMPLENR, 175},
   {224*OVERSAMPLENR, 170},
   {246*OVERSAMPLENR, 165},
   {267*OVERSAMPLENR, 160},
   {293*OVERSAMPLENR, 155},
   {316*OVERSAMPLENR, 150},
   {340*OVERSAMPLENR, 145},
   {364*OVERSAMPLENR, 140},
   {396*OVERSAMPLENR, 135},
   {425*OVERSAMPLENR, 130},
   {460*OVERSAMPLENR, 125},
   {489*OVERSAMPLENR, 120},
   {526*OVERSAMPLENR, 115},
   {558*OVERSAMPLENR, 110},
   {591*OVERSAMPLENR, 105},
   {628*OVERSAMPLENR, 100},
   {660*OVERSAMPLENR, 95},
   {696*OVERSAMPLENR, 90},
   {733*OVERSAMPLENR, 85},
   {761*OVERSAMPLENR, 80},
   {794*OVERSAMPLENR, 75},
   {819*OVERSAMPLENR, 70},
   {847*OVERSAMPLENR, 65},
   {870*OVERSAMPLENR, 60},
   {892*OVERSAMPLENR, 55},
   {911*OVERSAMPLENR, 50},
   {929*OVERSAMPLENR, 45},
   {944*OVERSAMPLENR, 40},
   {959*OVERSAMPLENR, 35},
   {971*OVERSAMPLENR, 30},
   {981*OVERSAMPLENR, 25},
   {989*OVERSAMPLENR, 20},
   {994*OVERSAMPLENR, 15},
   {1001*OVERSAMPLENR, 10},
   {1005*OVERSAMPLENR, 5},
   {1023*OVERSAMPLENR, 0}  //to allow internal 0ï¿½C
};
#endif
#if (THERMISTORHEATER_0 == 8) || (THERMISTORHEATER_1 == 8) || (THERMISTORHEATER_2 == 8) || (THERMISTORBED == 8)
// 100k 0603 SMD Vishay NTCS0603E3104FXT (4.7k pullup)
const short temptable_8[][2] PROGMEM = {
   {1*OVERSAMPLENR, 704},
   {54*OVERSAMPLENR, 216},
   {107*OVERSAMPLENR, 175},
   {160*OVERSAMPLENR, 152},
   {213*OVERSAMPLENR, 137},
   {266*OVERSAMPLENR, 125},
   {319*OVERSAMPLENR, 115},
   {372*OVERSAMPLENR, 106},
   {425*OVERSAMPLENR, 99},
   {478*OVERSAMPLENR, 91},
   {531*OVERSAMPLENR, 85},
   {584*OVERSAMPLENR, 78},
   {637*OVERSAMPLENR, 71},
   {690*OVERSAMPLENR, 65},
   {743*OVERSAMPLENR, 58},
   {796*OVERSAMPLENR, 50},
   {849*OVERSAMPLENR, 42},
   {902*OVERSAMPLENR, 31},
   {955*OVERSAMPLENR, 17},
   {1008*OVERSAMPLENR, 0}
};
#endif
#if (THERMISTORHEATER_0 == 9) || (THERMISTORHEATER_1 == 9) || (THERMISTORHEATER_2 == 9) || (THERMISTORBED == 9)
// 100k GE Sensing AL03006-58.2K-97-G1 (4.7k pullup)
const short temptable_9[][2] PROGMEM = {
	{1*OVERSAMPLENR, 936},
	{36*OVERSAMPLENR, 300},
	{71*OVERSAMPLENR, 246},
	{106*OVERSAMPLENR, 218},
	{141*OVERSAMPLENR, 199},
	{176*OVERSAMPLENR, 185},
	{211*OVERSAMPLENR, 173},
	{246*OVERSAMPLENR, 163},
	{281*OVERSAMPLENR, 155},
	{316*OVERSAMPLENR, 147},
	{351*OVERSAMPLENR, 140},
	{386*OVERSAMPLENR, 134},
	{421*OVERSAMPLENR, 128},
	{456*OVERSAMPLENR, 122},
	{491*OVERSAMPLENR, 117},
	{526*OVERSAMPLENR, 112},
	{561*OVERSAMPLENR, 107},
	{596*OVERSAMPLENR, 102},
	{631*OVERSAMPLENR, 97},
	{666*OVERSAMPLENR, 92},
	{701*OVERSAMPLENR, 87},
	{736*OVERSAMPLENR, 81},
	{771*OVERSAMPLENR, 76},
	{806*OVERSAMPLENR, 70},
	{841*OVERSAMPLENR, 63},
	{876*OVERSAMPLENR, 56},
	{911*OVERSAMPLENR, 48},
	{946*OVERSAMPLENR, 38},
	{981*OVERSAMPLENR, 23},
	{1005*OVERSAMPLENR, 5},
	{1016*OVERSAMPLENR, 0}
};
#endif
#if (THERMISTORHEATER_0 == 10) || (THERMISTORHEATER_1 == 10) || (THERMISTORHEATER_2 == 10) || (THERMISTORBED == 10)
// 100k RS thermistor 198-961 (4.7k pullup)
const short temptable_10[][2] PROGMEM = {
   {1*OVERSAMPLENR, 929},
   {36*OVERSAMPLENR, 299},
   {71*OVERSAMPLENR, 246},
   {106*OVERSAMPLENR, 217},
   {141*OVERSAMPLENR, 198},
   {176*OVERSAMPLENR, 184},
   {211*OVERSAMPLENR, 173},
   {246*OVERSAMPLENR, 163},
   {281*OVERSAMPLENR, 154},
   {316*OVERSAMPLENR, 147},
   {351*OVERSAMPLENR, 140},
   {386*OVERSAMPLENR, 134},
   {421*OVERSAMPLENR, 128},
   {456*OVERSAMPLENR, 122},
   {491*OVERSAMPLENR, 117},
   {526*OVERSAMPLENR, 112},
   {561*OVERSAMPLENR, 107},
   {596*OVERSAMPLENR, 102},
   {631*OVERSAMPLENR, 97},
   {666*OVERSAMPLENR, 91},
   {701*OVERSAMPLENR, 86},
   {736*OVERSAMPLENR, 81},
   {771*OVERSAMPLENR, 76},
   {806*OVERSAMPLENR, 70},
   {841*OVERSAMPLENR, 63},
   {876*OVERSAMPLENR, 56},
   {911*OVERSAMPLENR, 48},
   {946*OVERSAMPLENR, 38},
   {981*OVERSAMPLENR, 23},
   {1005*OVERSAMPLENR, 5},
   {1016*OVERSAMPLENR, 0}
};
#endif

#if (THERMISTORHEATER_0 == 51) || (THERMISTORHEATER_1 == 51) || (THERMISTORHEATER_2 == 51) || (THERMISTORBED == 51)
// 100k EPCOS (WITH 1kohm RESISTOR FOR PULLUP, R9 ON SANGUINOLOLU! NOT FOR 4.7kohm PULLUP! THIS IS NOT NORMAL!)
// Verified by linagee.
// Calculated using 1kohm pullup, voltage divider math, and manufacturer provided temp/resistance
// Advantage: Twice the resolution and better linearity from 150C to 200C
const short temptable_51[][2] PROGMEM = {
   {1*OVERSAMPLENR, 350},
   {190*OVERSAMPLENR, 250}, //top rating 250C
   {203*OVERSAMPLENR, 245},
   {217*OVERSAMPLENR, 240},
   {232*OVERSAMPLENR, 235},
   {248*OVERSAMPLENR, 230},
   {265*OVERSAMPLENR, 225},
   {283*OVERSAMPLENR, 220},
   {302*OVERSAMPLENR, 215},
   {322*OVERSAMPLENR, 210},
   {344*OVERSAMPLENR, 205},
   {366*OVERSAMPLENR, 200},
   {390*OVERSAMPLENR, 195},
   {415*OVERSAMPLENR, 190},
   {440*OVERSAMPLENR, 185},
   {467*OVERSAMPLENR, 180},
   {494*OVERSAMPLENR, 175},
   {522*OVERSAMPLENR, 170},
   {551*OVERSAMPLENR, 165},
   {580*OVERSAMPLENR, 160},
   {609*OVERSAMPLENR, 155},
   {638*OVERSAMPLENR, 150},
   {666*OVERSAMPLENR, 145},
   {695*OVERSAMPLENR, 140},
   {722*OVERSAMPLENR, 135},
   {749*OVERSAMPLENR, 130},
   {775*OVERSAMPLENR, 125},
   {800*OVERSAMPLENR, 120},
   {823*OVERSAMPLENR, 115},
   {845*OVERSAMPLENR, 110},
   {865*OVERSAMPLENR, 105},
   {884*OVERSAMPLENR, 100},
   {901*OVERSAMPLENR, 95},
   {917*OVERSAMPLENR, 90},
   {932*OVERSAMPLENR, 85},
   {944*OVERSAMPLENR, 80},
   {956*OVERSAMPLENR, 75},
   {966*OVERSAMPLENR, 70},
   {975*OVERSAMPLENR, 65},
   {982*OVERSAMPLENR, 60},
   {989*OVERSAMPLENR, 55},
   {995*OVERSAMPLENR, 50},
   {1000*OVERSAMPLENR, 45},
   {1004*OVERSAMPLENR, 40},
   {1007*OVERSAMPLENR, 35},
   {1010*OVERSAMPLENR, 30},
   {1013*OVERSAMPLENR, 25},
   {1015*OVERSAMPLENR, 20},
   {1017*OVERSAMPLENR, 15},
   {1018*OVERSAMPLENR, 10},
   {1019*OVERSAMPLENR, 5},
   {1020*OVERSAMPLENR, 0},
   {1021*OVERSAMPLENR, -5}
};
#endif

#if (THERMISTORHEATER_0 == 52) || (THERMISTORHEATER_1 == 52) || (THERMISTORHEATER_2 == 52) || (THERMISTORBED == 52) 
// 200k ATC Semitec 204GT-2 (WITH 1kohm RESISTOR FOR PULLUP, R9 ON SANGUINOLOLU! NOT FOR 4.7kohm PULLUP! THIS IS NOT NORMAL!)
// Verified by linagee. Source: http://shop.arcol.hu/static/datasheets/thermistors.pdf
// Calculated using 1kohm pullup, voltage divider math, and manufacturer provided temp/resistance
// Advantage: More resolution and better linearity from 150C to 200C
const short temptable_52[][2] PROGMEM = {
   {1*OVERSAMPLENR, 500},
   {125*OVERSAMPLENR, 300}, //top rating 300C
   {142*OVERSAMPLENR, 290},
   {162*OVERSAMPLENR, 280},
   {185*OVERSAMPLENR, 270},
   {211*OVERSAMPLENR, 260},
   {240*OVERSAMPLENR, 250},
   {274*OVERSAMPLENR, 240},
   {312*OVERSAMPLENR, 230},
   {355*OVERSAMPLENR, 220},
   {401*OVERSAMPLENR, 210},
   {452*OVERSAMPLENR, 200},
   {506*OVERSAMPLENR, 190},
   {563*OVERSAMPLENR, 180},
   {620*OVERSAMPLENR, 170},
   {677*OVERSAMPLENR, 160},
   {732*OVERSAMPLENR, 150},
   {783*OVERSAMPLENR, 140},
   {830*OVERSAMPLENR, 130},
   {871*OVERSAMPLENR, 120},
   {906*OVERSAMPLENR, 110},
   {935*OVERSAMPLENR, 100},
   {958*OVERSAMPLENR, 90},
   {976*OVERSAMPLENR, 80},
   {990*OVERSAMPLENR, 70},
   {1000*OVERSAMPLENR, 60},
   {1008*OVERSAMPLENR, 50},
   {1013*OVERSAMPLENR, 40},
   {1017*OVERSAMPLENR, 30},
   {1019*OVERSAMPLENR, 20},
   {1021*OVERSAMPLENR, 10},
   {1022*OVERSAMPLENR, 0}
};
#endif

#if (THERMISTORHEATER_0 == 55) || (THERMISTORHEATER_1 == 55) || (THERMISTORHEATER_2 == 55) || (THERMISTORBED == 55) 
// 100k ATC Semitec 104GT-2 (Used on ParCan) (WITH 1kohm RESISTOR FOR PULLUP, R9 ON SANGUINOLOLU! NOT FOR 4.7kohm PULLUP! THIS IS NOT NORMAL!)
// Verified by linagee. Source: http://shop.arcol.hu/static/datasheets/thermistors.pdf
// Calculated using 1kohm pullup, voltage divider math, and manufacturer provided temp/resistance
// Advantage: More resolution and better linearity from 150C to 200C
const short temptable_55[][2] PROGMEM = {
   {1*OVERSAMPLENR, 500},
   {76*OVERSAMPLENR, 300},
   {87*OVERSAMPLENR, 290},
   {100*OVERSAMPLENR, 280},
   {114*OVERSAMPLENR, 270},
   {131*OVERSAMPLENR, 260},
   {152*OVERSAMPLENR, 250},
   {175*OVERSAMPLENR, 240},
   {202*OVERSAMPLENR, 230},
   {234*OVERSAMPLENR, 220},
   {271*OVERSAMPLENR, 210},
   {312*OVERSAMPLENR, 200},
   {359*OVERSAMPLENR, 190},
   {411*OVERSAMPLENR, 180},
   {467*OVERSAMPLENR, 170},
   {527*OVERSAMPLENR, 160},
   {590*OVERSAMPLENR, 150},
   {652*OVERSAMPLENR, 140},
   {713*OVERSAMPLENR, 130},
   {770*OVERSAMPLENR, 120},
   {822*OVERSAMPLENR, 110},
   {867*OVERSAMPLENR, 100},
   {905*OVERSAMPLENR, 90},
   {936*OVERSAMPLENR, 80},
   {961*OVERSAMPLENR, 70},
   {979*OVERSAMPLENR, 60},
   {993*OVERSAMPLENR, 50},
   {1003*OVERSAMPLENR, 40},
   {1010*OVERSAMPLENR, 30},
   {1015*OVERSAMPLENR, 20},
   {1018*OVERSAMPLENR, 10},
   {1020*OVERSAMPLENR, 0}
};
#endif

#if (THERMISTORHEATER_0 == 56) || (THERMISTORHEATER_1 == 56) || (THERMISTORHEATER_2 == 56) || (THERMISTORBED == 56) 
// Thermistor lookup table for Marlin
// ./createTemperatureLookup.py --rp=4520 --t1=20.0:121500.0 --t2=150.0:1256.0 --t3=250.0:175.0 --num-temps=72
const short temptable_56[][2] PROGMEM = {
   {164, 350},
   {174, 345},
   {185, 340},
   {196, 335},
   {208, 330},
   {222, 325},
   {236, 320},
   {252, 315},
   {268, 310},
   {287, 305},
   {306, 300},
   {328, 295},
   {351, 290},
   {377, 285},
   {404, 280},
   {434, 275},
   {467, 270},
   {504, 265},
   {543, 260},
   {586, 255},
   {634, 250},
   {686, 245},
   {743, 240},
   {806, 235},
   {876, 230},
   {953, 225},
   {1037, 220},
   {1131, 215},
   {1234, 210},
   {1348, 205},
   {1474, 200},
   {1614, 195},
   {1769, 190},
   {1940, 185},
   {2129, 180},
   {2339, 175},
   {2570, 170},
   {2825, 165},
   {3106, 160},
   {3415, 155},
   {3753, 150},
   {4123, 145},
   {4526, 140},
   {4962, 135},
   {5431, 130},
   {5934, 125},
   {6468, 120},
   {7032, 115},
   {7621, 110},
   {8231, 105},
   {8855, 100},
   {9487, 95},
   {10119, 90},
   {10743, 85},
   {11350, 80},
   {11934, 75},
   {12487, 70},
   {13004, 65},
   {13480, 60},
   {13913, 55},
   {14301, 50},
   {14644, 45},
   {14944, 40},
   {15204, 35},
   {15425, 30},
   {15612, 25},
   {15768, 20},
   {15897, 15},
   {16002, 10},
   {16087, 5},
   {16156, 0}
};

#endif

#if (THERMISTORHEATER_0 == 57) || (THERMISTORHEATER_1 == 57) || (THERMISTORHEATER_2 == 57) || (THERMISTORBED == 57) 
// Thermistor lookup table for Marlin
// ./createTemperatureLookupMarlin.py --rp=4680 --t1=21.4:106300 --t2=187:1023 --t3=248:281 --num-temps=72
// thermistor table for  extruder
const short temptable_57[][2] PROGMEM = {
  {159, 340},
  {172, 335},
  {186, 330},
  {202, 325},
  {219, 320},
  {238, 315},
  {258, 310},
  {281, 305},
  {306, 300},
  {333, 295},
  {363, 209},
  {396, 285},
  {432, 280},
  {472, 275},
  {516, 270},
  {565, 265},
  {618, 260},
  {677, 255},
  {742, 240},
  {814, 245},
  {894, 240},
  {981, 235},
  {1078, 230},
  {1184, 225},
  {1302, 220},
  {1432, 215},
  {1574, 210},
  {1732, 205},
  {1904, 200},
  {2094, 195},
  {2302, 190},
  {2530, 185},
  {2779, 180},
  {3050, 175},
  {3344, 170},
  {3662, 165},
  {4006, 160},
  {4375, 155},
  {4770, 150},
  {5190, 145},
  {5634, 140},
  {6101, 135},
  {6589, 130},
  {7095, 125},
  {7617, 120},
  {8149, 115},
  {8689, 110},
  {9230, 105},
  {9770, 100},
  {10302, 95},
  {11810, 90},
  {12271, 85},
  {12705, 80},
  {13111, 75},
  {13487, 70},
  {13833, 65},
  {14149, 60},
  {14435, 55},
  {14693, 50},
  {14923, 45},
  {15127, 40},
  {15308, 35},
  {15466, 30},
  {15604, 25},
  {15725, 20},
  {15828, 15},
  {15918, 10},
  {15994, 5},
  {16060, 0}
};

#endif

#if (THERMISTORHEATER_0 == 58) || (THERMISTORHEATER_1 == 58) || (THERMISTORHEATER_2 == 58) || (THERMISTORBED == 58) 
// Thermistor lookup table for Marlin
// ./createTemperatureLookup.py --rp=4670 --t1=21.7:110700.0 --t2=190.0:623.0 --t3=259.0:192.0 --num-temps=72
// thermistor table for  heatbed
const short temptable_58[][2] PROGMEM = {
  {198, 350},
  {210, 345},
  {223, 340},
  {236, 335},
  {251, 330},
  {267, 325},
  {284, 320},
  {303, 315},
  {323, 310},
  {345, 305},
  {369, 300},
  {395, 295},
  {423, 290},
  {453, 285},
  {486, 280},
  {522, 275},
  {562, 270},
  {605, 265},
  {652, 260},
  {704, 255},
  {760, 250},
  {822, 245},
  {890, 240},
  {964, 235},
  {1046, 230},
  {1136, 225},
  {1235, 220},
  {1344, 215},
  {1464, 210},
  {1597, 205},
  {1743, 200},
  {1903, 195},
  {2080, 190},
  {2275, 185},
  {2489, 180},
  {2725, 175},
  {2983, 170},
  {3267, 165},
  {3576, 160},
  {3913, 155},
  {4280, 150},
  {4676, 145},
  {5104, 140},
  {5561, 135},
  {6049, 130},
  {6565, 125},
  {7108, 120},
  {7673, 115},
  {8256, 110},
  {8852, 105},
  {9455, 100},
  {10058, 95},
  {10654, 90},
  {11237, 85},
  {11799, 80},
  {12334, 75},
  {12838, 70},
  {13306, 65},
  {13734, 60},
  {14123, 55},
  {14471, 50},
  {14779, 45},
  {15048, 40},
  {15282, 35},
  {15481, 30},
  {15651, 25},
  {15793, 20},
  {15912, 15},
  {16010, 10},
  {16090, 5},
  {16154, 0}
 };

#endif

#if (THERMISTORHEATER_0 == 59) || (THERMISTORHEATER_1 == 59) || (THERMISTORHEATER_2 == 59) || (THERMISTORBED == 59) 
// created by m.winkler@laydrop.com on 27.07.2015
// Thermistor lookup table for Marlin 
// ./createTemperatureLookupMarlin.py --rp=4680 --t1=28.0:84491.0 --t2=148.0:2453.0 --t3=254.4:264.0 --num-temps=200
// Steinhart-Hart Coefficients: 0.000911950202091192, 0.000164959324617836,  3.68013503885176e-07
//#define NUMTEMPS 351
const short temptable_59[][2] PROGMEM = {
      {(short)(12.42*OVERSAMPLENR), 350}, // v=0.0606665780824 r=57.481356526 res=5.53486951538 C/count
   {(short)(12.78*OVERSAMPLENR), 348}, // v=0.0623802692635 r=59.125586026 res=5.36425320422 C/count
   {(short)(13.14*OVERSAMPLENR), 346}, // v=0.064150782046 r=60.8255330984 res=5.1981017416 C/count
   {(short)(13.51*OVERSAMPLENR), 344}, // v=0.0659802301916 r=62.5833482035 res=5.03632869567 C/count
   {(short)(13.90*OVERSAMPLENR), 342}, // v=0.0678708128827 r=64.4012742247 res=4.87884831348 C/count
   {(short)(14.30*OVERSAMPLENR), 340}, // v=0.0698248183553 r=66.2816508264 res=4.72557554899 C/count
   {(short)(14.71*OVERSAMPLENR), 338}, // v=0.0718446276877 r=68.226919035 res=4.57642608991 C/count
   {(short)(15.14*OVERSAMPLENR), 336}, // v=0.0739327187509 r=70.2396260545 res=4.43131638335 C/count
   {(short)(15.58*OVERSAMPLENR), 334}, // v=0.0760916703273 r=72.3224303315 res=4.29016366043 C/count
   {(short)(16.04*OVERSAMPLENR), 332}, // v=0.0783241664044 r=74.4781068819 res=4.15288595961 C/count
   {(short)(16.51*OVERSAMPLENR), 330}, // v=0.0806330006494 r=76.7095528935 res=4.01940214894 C/count
   {(short)(17.00*OVERSAMPLENR), 328}, // v=0.0830210810725 r=79.0197936224 res=3.88963194714 C/count
   {(short)(17.51*OVERSAMPLENR), 326}, // v=0.0854914348853 r=81.4119885971 res=3.76349594357 C/count
   {(short)(18.03*OVERSAMPLENR), 324}, // v=0.0880472135607 r=83.8894381481 res=3.64091561704 C/count
   {(short)(18.57*OVERSAMPLENR), 322}, // v=0.0906916981032 r=86.4555902833 res=3.52181335349 C/count
   {(short)(19.13*OVERSAMPLENR), 320}, // v=0.0934283045349 r=89.1140479263 res=3.4061124626 C/count
   {(short)(19.71*OVERSAMPLENR), 318}, // v=0.0962605896059 r=91.86857654 res=3.29373719325 C/count
   {(short)(20.31*OVERSAMPLENR), 316}, // v=0.0991922567358 r=94.7231121567 res=3.18461274794 C/count
   {(short)(20.94*OVERSAMPLENR), 314}, // v=0.102227162193 r=97.6817698385 res=3.07866529611 C/count
   {(short)(21.58*OVERSAMPLENR), 312}, // v=0.105369321521 r=100.748852592 res=2.9758219864 C/count
   {(short)(22.25*OVERSAMPLENR), 310}, // v=0.108622916218 r=103.928860767 res=2.8760109579 C/count
   {(short)(22.94*OVERSAMPLENR), 308}, // v=0.111992300671 r=107.226501958 res=2.77916135032 C/count
   {(short)(23.65*OVERSAMPLENR), 306}, // v=0.115482009368 r=110.646701452 res=2.68520331326 C/count
   {(short)(24.39*OVERSAMPLENR), 304}, // v=0.119096764372 r=114.194613242 res=2.59406801435 C/count
   {(short)(25.16*OVERSAMPLENR), 302}, // v=0.122841483081 r=117.875631646 res=2.50568764656 C/count
   {(short)(25.95*OVERSAMPLENR), 300}, // v=0.126721286273 r=121.695403567 res=2.41999543451 C/count
   {(short)(26.78*OVERSAMPLENR), 298}, // v=0.130741506441 r=125.659841423 res=2.33692563981 C/count
   {(short)(27.63*OVERSAMPLENR), 296}, // v=0.134907696425 r=129.775136806 res=2.25641356561 C/count
   {(short)(28.51*OVERSAMPLENR), 294}, // v=0.139225638341 r=134.047774893 res=2.17839556018 C/count
   {(short)(29.43*OVERSAMPLENR), 292}, // v=0.14370135282 r=138.484549666 res=2.10280901968 C/count
   {(short)(30.38*OVERSAMPLENR), 290}, // v=0.148341108542 r=143.092579983 res=2.02959239007 C/count
   {(short)(31.37*OVERSAMPLENR), 288}, // v=0.15315143209 r=147.879326564 res=1.95868516826 C/count
   {(short)(32.39*OVERSAMPLENR), 286}, // v=0.158139118097 r=152.852609925 res=1.89002790241 C/count
   {(short)(33.45*OVERSAMPLENR), 284}, // v=0.163311239707 r=158.020629341 res=1.82356219157 C/count
   {(short)(34.54*OVERSAMPLENR), 282}, // v=0.168675159335 r=163.391982887 res=1.75923068447 C/count
   {(short)(35.68*OVERSAMPLENR), 280}, // v=0.174238539723 r=168.975688628 res=1.69697707771 C/count
   {(short)(36.87*OVERSAMPLENR), 278}, // v=0.180009355285 r=174.781207026 res=1.63674611316 C/count
   {(short)(38.09*OVERSAMPLENR), 276}, // v=0.185995903731 r=180.81846464 res=1.57848357484 C/count
   {(short)(39.36*OVERSAMPLENR), 274}, // v=0.192206817954 r=187.097879207 res=1.52213628501 C/count
   {(short)(40.68*OVERSAMPLENR), 272}, // v=0.198651078178 r=193.63038617 res=1.46765209979 C/count
   {(short)(42.05*OVERSAMPLENR), 270}, // v=0.205338024319 r=200.427466772 res=1.4149799041 C/count
   {(short)(43.47*OVERSAMPLENR), 268}, // v=0.212277368575 r=207.501177785 res=1.36406960611 C/count
   {(short)(44.95*OVERSAMPLENR), 266}, // v=0.219479208175 r=214.864183002 res=1.3148721311 C/count
   {(short)(46.48*OVERSAMPLENR), 264}, // v=0.226954038294 r=222.529786584 res=1.26733941487 C/count
   {(short)(48.07*OVERSAMPLENR), 262}, // v=0.234712765064 r=230.511968396 res=1.22142439662 C/count
   {(short)(49.72*OVERSAMPLENR), 260}, // v=0.24276671866 r=238.825421445 res=1.17708101139 C/count
   {(short)(51.43*OVERSAMPLENR), 258}, // v=0.251127666402 r=247.485591568 res=1.13426418207 C/count
   {(short)(53.21*OVERSAMPLENR), 256}, // v=0.259807825811 r=256.508719502 res=1.09292981101 C/count
   {(short)(55.05*OVERSAMPLENR), 254}, // v=0.268819877562 r=265.911885498 res=1.05303477119 C/count
   {(short)(56.97*OVERSAMPLENR), 252}, // v=0.278176978262 r=275.713056646 res=1.01453689711 C/count
   {(short)(58.96*OVERSAMPLENR), 250}, // v=0.287892772964 r=285.93113708 res=0.977394975236 C/count
   {(short)(61.03*OVERSAMPLENR), 248}, // v=0.297981407322 r=296.586021254 res=0.941568734247 C/count
   {(short)(63.17*OVERSAMPLENR), 246}, // v=0.308457539297 r=307.698650498 res=0.907018834882 C/count
   {(short)(65.40*OVERSAMPLENR), 244}, // v=0.319336350285 r=319.291073057 res=0.873706859573 C/count
   {(short)(67.71*OVERSAMPLENR), 242}, // v=0.330633555545 r=331.386507861 res=0.841595301805 C/count
   {(short)(70.12*OVERSAMPLENR), 240}, // v=0.342365413783 r=344.009412255 res=0.810647555252 C/count
   {(short)(72.61*OVERSAMPLENR), 238}, // v=0.354548735742 r=357.185553971 res=0.780827902698 C/count
   {(short)(75.20*OVERSAMPLENR), 236}, // v=0.367200891618 r=370.942087617 res=0.752101504775 C/count
   {(short)(77.89*OVERSAMPLENR), 234}, // v=0.380339817119 r=385.307635985 res=0.724434388528 C/count
   {(short)(80.69*OVERSAMPLENR), 232}, // v=0.393984017961 r=400.312376519 res=0.697793435835 C/count
   {(short)(83.59*OVERSAMPLENR), 230}, // v=0.408152572571 r=415.988133278 res=0.672146371692 C/count
   {(short)(86.60*OVERSAMPLENR), 228}, // v=0.422865132769 r=432.368474769 res=0.647461752395 C/count
   {(short)(89.73*OVERSAMPLENR), 226}, // v=0.438141922147 r=449.488818077 res=0.623708953621 C/count
   {(short)(92.98*OVERSAMPLENR), 224}, // v=0.454003731877 r=467.386539686 res=0.600858158448 C/count
   {(short)(96.35*OVERSAMPLENR), 222}, // v=0.470471913631 r=486.101093493 res=0.578880345311 C/count
   {(short)(99.85*OVERSAMPLENR), 220}, // v=0.487568369299 r=505.674136488 res=0.557747275922 C/count
   {(short)(103.49*OVERSAMPLENR), 218}, // v=0.505315537147 r=526.14966265 res=0.537431483176 C/count
   {(short)(107.26*OVERSAMPLENR), 216}, // v=0.523736374052 r=547.574145623 res=0.517906259049 C/count
   {(short)(111.18*OVERSAMPLENR), 214}, // v=0.542854333418 r=569.996690807 res=0.499145642514 C/count
   {(short)(115.24*OVERSAMPLENR), 212}, // v=0.562693338375 r=593.469197513 res=0.481124407484 C/count
   {(short)(119.46*OVERSAMPLENR), 210}, // v=0.58327774981 r=618.046531904 res=0.463818050808 C/count
   {(short)(123.83*OVERSAMPLENR), 208}, // v=0.604632328816 r=643.786711499 res=0.447202780331 C/count
   {(short)(128.36*OVERSAMPLENR), 206}, // v=0.626782193062 r=670.751102055 res=0.431255503025 C/count
   {(short)(133.07*OVERSAMPLENR), 204}, // v=0.649752766644 r=699.004627732 res=0.415953813231 C/count
   {(short)(137.95*OVERSAMPLENR), 202}, // v=0.67356972292 r=728.615995494 res=0.401275980999 C/count
   {(short)(143.00*OVERSAMPLENR), 200}, // v=0.698258919849 r=759.657934777 res=0.387200940563 C/count
   {(short)(148.24*OVERSAMPLENR), 198}, // v=0.723846327357 r=792.207453559 res=0.373708278959 C/count
   {(short)(153.67*OVERSAMPLENR), 196}, // v=0.750357946268 r=826.34611201 res=0.360778224798 C/count
   {(short)(159.30*OVERSAMPLENR), 194}, // v=0.777819718323 r=862.160315027 res=0.348391637218 C/count
   {(short)(165.12*OVERSAMPLENR), 192}, // v=0.806257426892 r=899.74162507 res=0.336529995023 C/count
   {(short)(171.15*OVERSAMPLENR), 190}, // v=0.835696587957 r=939.187096773 res=0.325175386031 C/count
   {(short)(177.39*OVERSAMPLENR), 188}, // v=0.866162331047 r=980.599634994 res=0.314310496644 C/count
   {(short)(183.84*OVERSAMPLENR), 186}, // v=0.897679269823 r=1024.08837804 res=0.303918601653 C/count
   {(short)(190.52*OVERSAMPLENR), 184}, // v=0.930271362113 r=1069.76910798 res=0.293983554306 C/count
   {(short)(197.42*OVERSAMPLENR), 182}, // v=0.963961759268 r=1117.7646901 res=0.284489776638 C/count
   {(short)(204.55*OVERSAMPLENR), 180}, // v=0.998772644827 r=1168.20554367 res=0.275422250101 C/count
   {(short)(211.91*OVERSAMPLENR), 178}, // v=1.03472506259 r=1221.23014655 res=0.266766506497 C/count
   {(short)(219.51*OVERSAMPLENR), 176}, // v=1.07183873434 r=1276.98557607 res=0.258508619235 C/count
   {(short)(227.36*OVERSAMPLENR), 174}, // v=1.11013186763 r=1335.6280891 res=0.250635194937 C/count
   {(short)(235.44*OVERSAMPLENR), 172}, // v=1.14962095416 r=1397.32374433 res=0.243133365412 C/count
   {(short)(243.78*OVERSAMPLENR), 170}, // v=1.19032055959 r=1462.24907004 res=0.235990780004 C/count
   {(short)(252.36*OVERSAMPLENR), 168}, // v=1.23224310572 r=1530.59178089 res=0.229195598368 C/count
   {(short)(261.20*OVERSAMPLENR), 166}, // v=1.2753986462 r=1602.55154773 res=0.222736483655 C/count
   {(short)(270.29*OVERSAMPLENR), 164}, // v=1.3197946373 r=1678.34082445 res=0.216602596174 C/count
   {(short)(279.64*OVERSAMPLENR), 162}, // v=1.36543570538 r=1758.18573649 res=0.210783587511 C/count
   {(short)(289.24*OVERSAMPLENR), 160}, // v=1.412323413 r=1842.32703605 res=0.205269595182 C/count
   {(short)(299.10*OVERSAMPLENR), 158}, // v=1.46045602593 r=1931.02112911 res=0.200051237801 C/count
   {(short)(309.21*OVERSAMPLENR), 156}, // v=1.50982828346 r=2024.54118033 res=0.195119610824 C/count
   {(short)(319.58*OVERSAMPLENR), 154}, // v=1.56043117475 r=2123.17830195 res=0.190466282898 C/count
   {(short)(330.19*OVERSAMPLENR), 152}, // v=1.61225172426 r=2227.24283371 res=0.186083292834 C/count
   {(short)(341.05*OVERSAMPLENR), 150}, // v=1.6652727892 r=2337.06572105 res=0.181963147263 C/count
   {(short)(352.15*OVERSAMPLENR), 148}, // v=1.71947287256 r=2453.0 res=0.178098818997 C/count
   {(short)(363.48*OVERSAMPLENR), 146}, // v=1.77482595514 r=2575.42239721 res=0.174483746149 C/count
   {(short)(375.05*OVERSAMPLENR), 144}, // v=1.83130134995 r=2704.73505508 res=0.171111832059 C/count
   {(short)(386.84*OVERSAMPLENR), 142}, // v=1.88886358296 r=2841.36739227 res=0.16797744607 C/count
   {(short)(398.84*OVERSAMPLENR), 140}, // v=1.94747230335 r=2985.77811094 res=0.165075425206 C/count
   {(short)(411.05*OVERSAMPLENR), 138}, // v=2.00708222703 r=3138.45736335 res=0.162401076831 C/count
   {(short)(423.45*OVERSAMPLENR), 136}, // v=2.06764311654 r=3299.92909117 res=0.159950182321 C/count
   {(short)(436.04*OVERSAMPLENR), 134}, // v=2.12909980044 r=3470.75355234 res=0.157719001849 C/count
   {(short)(448.80*OVERSAMPLENR), 132}, // v=2.19139223468 r=3651.53005163 res=0.155704280331 C/count
   {(short)(461.71*OVERSAMPLENR), 130}, // v=2.25445560842 r=3842.89989256 res=0.15390325464 C/count
   {(short)(474.77*OVERSAMPLENR), 128}, // v=2.31822049568 r=4045.5495697 res=0.15231366215 C/count
   {(short)(487.96*OVERSAMPLENR), 126}, // v=2.38261305409 r=4260.21422265 res=0.150933750729 C/count
   {(short)(501.26*OVERSAMPLENR), 124}, // v=2.44755527115 r=4487.68137446 res=0.149762290272 C/count
   {(short)(514.66*OVERSAMPLENR), 122}, // v=2.51296525745 r=4728.7949797 res=0.148798585888 C/count
   {(short)(528.13*OVERSAMPLENR), 120}, // v=2.57875758598 r=4984.45980976 res=0.148042492875 C/count
   {(short)(541.66*OVERSAMPLENR), 118}, // v=2.64484367535 r=5255.64620533 res=0.147494433605 C/count
   {(short)(555.24*OVERSAMPLENR), 116}, // v=2.71113221435 r=5543.39522917 res=0.147155416474 C/count
   {(short)(568.84*OVERSAMPLENR), 114}, // v=2.77752962415 r=5848.82425534 res=0.147027057084 C/count
   {(short)(582.44*OVERSAMPLENR), 112}, // v=2.84394055376 r=6173.13303434 res=0.147111601815 C/count
   {(short)(596.02*OVERSAMPLENR), 110}, // v=2.91026840377 r=6517.61027793 res=0.147411953999 C/count
   {(short)(609.57*OVERSAMPLENR), 108}, // v=2.97641587262 r=6883.64081108 res=0.147931702897 C/count
   {(short)(623.06*OVERSAMPLENR), 106}, // v=3.042285519 r=7272.71334361 res=0.14867515571 C/count
   {(short)(636.47*OVERSAMPLENR), 104}, // v=3.10778033391 r=7686.42891909 res=0.149647372876 C/count
   {(short)(649.79*OVERSAMPLENR), 102}, // v=3.17280431518 r=8126.51010417 res=0.150854206938 C/count
   {(short)(662.99*OVERSAMPLENR), 100}, // v=3.23726303742 r=8594.81098808 res=0.152302345276 C/count
   {(short)(676.06*OVERSAMPLENR), 98}, // v=3.30106421027 r=9093.3280689 res=0.153999357043 C/count
   {(short)(688.97*OVERSAMPLENR), 96}, // v=3.36411821785 r=9624.21211075 res=0.155953744675 C/count
   {(short)(701.71*OVERSAMPLENR), 94}, // v=3.42633863285 r=10189.781065 res=0.158175000364 C/count
   {(short)(714.27*OVERSAMPLENR), 92}, // v=3.4876426989 r=10792.5341578 res=0.160673667958 C/count
   {(short)(726.62*OVERSAMPLENR), 90}, // v=3.54795177567 r=11435.1672568 res=0.163461410755 C/count
   {(short)(738.75*OVERSAMPLENR), 88}, // v=3.60719174154 r=12120.5896418 res=0.166551085748 C/count
   {(short)(750.65*OVERSAMPLENR), 86}, // v=3.66529334985 r=12851.9423166 res=0.169956824894 C/count
   {(short)(762.31*OVERSAMPLENR), 84}, // v=3.72219253515 r=13632.6180146 res=0.17369412408 C/count
   {(short)(773.70*OVERSAMPLENR), 82}, // v=3.77783066714 r=14466.2830648 res=0.17777994049 C/count
   {(short)(784.83*OVERSAMPLENR), 80}, // v=3.83215475074 r=15356.9013059 res=0.18223279919 C/count
   {(short)(795.67*OVERSAMPLENR), 78}, // v=3.88511757158 r=16308.7602526 res=0.187072909795 C/count
   {(short)(806.23*OVERSAMPLENR), 76}, // v=3.93667778725 r=17326.4997414 res=0.192322294206 C/count
   {(short)(816.50*OVERSAMPLENR), 74}, // v=3.98679996543 r=18415.1433098 res=0.198004926498 C/count
   {(short)(826.46*OVERSAMPLENR), 72}, // v=4.03545457074 r=19580.132587 res=0.204146886156 C/count
   {(short)(836.12*OVERSAMPLENR), 70}, // v=4.08261790294 r=20827.3650062 res=0.210776525997 C/count
   {(short)(845.47*OVERSAMPLENR), 68}, // v=4.1282719896 r=22163.2351844 res=0.217924656255 C/count
   {(short)(854.51*OVERSAMPLENR), 66}, // v=4.17240443708 r=23594.6803493 res=0.225624746476 C/count
   {(short)(863.23*OVERSAMPLENR), 64}, // v=4.21500824374 r=25129.2302416 res=0.233913147063 C/count
   {(short)(871.65*OVERSAMPLENR), 62}, // v=4.25608157987 r=26775.0619621 res=0.242829332516 C/count
   {(short)(879.74*OVERSAMPLENR), 60}, // v=4.29562753885 r=28541.0602924 res=0.252416168642 C/count
   {(short)(887.53*OVERSAMPLENR), 58}, // v=4.33365386429 r=30436.8840726 res=0.262720206304 C/count
   {(short)(895.01*OVERSAMPLENR), 56}, // v=4.37017265757 r=32473.0392914 res=0.273792004554 C/count
   {(short)(902.18*OVERSAMPLENR), 54}, // v=4.40520007062 r=34660.9596139 res=0.285686486349 C/count
   {(short)(909.06*OVERSAMPLENR), 52}, // v=4.43875598803 r=37013.0951617 res=0.29846333046 C/count
   {(short)(915.63*OVERSAMPLENR), 50}, // v=4.47086370283 r=39543.0104512 res=0.312187403585 C/count
   {(short)(921.92*OVERSAMPLENR), 48}, // v=4.50154958972 r=42265.4925047 res=0.326929237241 C/count
   {(short)(927.92*OVERSAMPLENR), 46}, // v=4.53084277931 r=45196.670268 res=0.342765554529 C/count
   {(short)(933.64*OVERSAMPLENR), 44}, // v=4.55877483662 r=48354.1466033 res=0.359779852584 C/count
   {(short)(939.09*OVERSAMPLENR), 42}, // v=4.58537944647 r=51757.1442782 res=0.378063047233 C/count
   {(short)(944.27*OVERSAMPLENR), 40}, // v=4.61069210862 r=55426.6675452 res=0.397714187298 C/count
   {(short)(949.20*OVERSAMPLENR), 38}, // v=4.63474984423 r=59385.6810965 res=0.41884124695 C/count
   {(short)(953.87*OVERSAMPLENR), 36}, // v=4.65759091586 r=63659.3084007 res=0.441562005717 C/count
   {(short)(958.31*OVERSAMPLENR), 34}, // v=4.67925456205 r=68275.0516751 res=0.46600502706 C/count
   {(short)(962.52*OVERSAMPLENR), 32}, // v=4.69978074767 r=73263.0360254 res=0.492310748021 C/count
   {(short)(966.49*OVERSAMPLENR), 30}, // v=4.71920993077 r=78656.2806046 res=0.520632694233 C/count
   {(short)(970.26*OVERSAMPLENR), 28}, // v=4.73758284644 r=84491.0 res=0.551138836755 C/count
   {(short)(973.81*OVERSAMPLENR), 26}, // v=4.75494030775 r=90806.9394668 res=0.584013109614 C/count
   {(short)(977.17*OVERSAMPLENR), 24}, // v=4.77132302394 r=97647.748088 res=0.619457109931 C/count
   {(short)(980.33*OVERSAMPLENR), 22}, // v=4.78677143558 r=105061.394468 res=0.657692005894 C/count
   {(short)(983.31*OVERSAMPLENR), 20}, // v=4.8013255663 r=113100.630168 res=0.698960681984 C/count
   {(short)(986.12*OVERSAMPLENR), 18}, // v=4.81502489062 r=121823.50676 res=0.74353015564 C/count
   {(short)(988.76*OVERSAMPLENR), 16}, // v=4.82790821733 r=131293.95318 res=0.791694305415 C/count
   {(short)(991.23*OVERSAMPLENR), 14}, // v=4.84001358754 r=141582.420912 res=0.84377695753 C/count
   {(short)(993.56*OVERSAMPLENR), 12}, // v=4.85137818681 r=152766.605571 res=0.900135386141 C/count
   {(short)(995.75*OVERSAMPLENR), 10}, // v=4.86203827044 r=164932.254604 res=0.961164292657 C/count
   {(short)(997.79*OVERSAMPLENR), 8}, // v=4.87202910098 r=178174.072135 res=1.02730034173 C/count
   {(short)(999.71*OVERSAMPLENR), 6}, // v=4.88138489733 r=192596.733519 res=1.09902734648 C/count
   {(short)(1001.50*OVERSAMPLENR), 4}, // v=4.89013879427 r=208316.023881 res=1.17688221381 C/count
   {(short)(1003.18*OVERSAMPLENR), 2}, // v=4.89832281172 r=225460.11692 res=1.26146178338 C/count
   {(short)(1004.74*OVERSAMPLENR), 0}  // v=4.90596783288 r=244171.012543 res=1.35343072182 C/count
};

#endif


#if (THERMISTORHEATER_0 == 120) || (THERMISTORHEATER_1 == 120) || (THERMISTORHEATER_2 == 120) || (THERMISTORBED == 120) 
// created by m.winkler@laydrop.com on 27.07.2015 
// works with 1K ohm pull up resistor for better temp resolution in upper region
// Thermistor lookup table for Marlin 
// ./createTemperatureLookupMarlin.py --rp=938 --t1=28.0:84491.0 --t2=148.0:2453.0 --t3=254.4:264.0 --num-temps=176
// Steinhart-Hart Coefficients: 0.000911950202091192, 0.000164959324617836,  3.68013503885176e-07
//#define NUMTEMPS 176
const short temptable_120[][2] PROGMEM = {
   {(short)(59.13*OVERSAMPLENR), 350}, // v=0.288711366361 r=57.481356526 res=1.26401121227 C/count
   {(short)(60.72*OVERSAMPLENR), 348}, // v=0.296480136778 r=59.125586026 res=1.22703980282 C/count
   {(short)(62.36*OVERSAMPLENR), 346}, // v=0.304485273368 r=60.8255330984 res=1.19109167111 C/count
   {(short)(64.05*OVERSAMPLENR), 344}, // v=0.312734308021 r=62.5833482035 res=1.15614370765 C/count
   {(short)(65.79*OVERSAMPLENR), 342}, // v=0.321234997803 r=64.4012742247 res=1.12217318212 C/count
   {(short)(67.58*OVERSAMPLENR), 340}, // v=0.329995329357 r=66.2816508264 res=1.08915774161 C/count
   {(short)(69.43*OVERSAMPLENR), 338}, // v=0.339023523145 r=68.226919035 res=1.05707540878 C/count
   {(short)(71.34*OVERSAMPLENR), 336}, // v=0.348328037499 r=70.2396260545 res=1.02590457987 C/count
   {(short)(73.30*OVERSAMPLENR), 334}, // v=0.357917572452 r=72.3224303315 res=0.995624022648 C/count
   {(short)(75.33*OVERSAMPLENR), 332}, // v=0.367801073305 r=74.4781068819 res=0.966212874282 C/count
   {(short)(77.41*OVERSAMPLENR), 330}, // v=0.377987733902 r=76.7095528935 res=0.937650639122 C/count
   {(short)(79.56*OVERSAMPLENR), 328}, // v=0.388486999555 r=79.0197936224 res=0.909917186395 C/count
   {(short)(81.78*OVERSAMPLENR), 326}, // v=0.399308569586 r=81.4119885971 res=0.882992747832 C/count
   {(short)(84.06*OVERSAMPLENR), 324}, // v=0.410462399436 r=83.8894381481 res=0.856857915225 C/count
   {(short)(86.42*OVERSAMPLENR), 322}, // v=0.421958702277 r=86.4555902833 res=0.831493637915 C/count
   {(short)(88.84*OVERSAMPLENR), 320}, // v=0.433807950082 r=89.1140479263 res=0.806881220216 C/count
   {(short)(91.35*OVERSAMPLENR), 318}, // v=0.446020874084 r=91.86857654 res=0.783002318781 C/count
   {(short)(93.92*OVERSAMPLENR), 316}, // v=0.458608464561 r=94.7231121567 res=0.759838939913 C/count
   {(short)(96.58*OVERSAMPLENR), 314}, // v=0.471581969883 r=97.6817698385 res=0.737373436821 C/count
   {(short)(99.32*OVERSAMPLENR), 312}, // v=0.48495289473 r=100.748852592 res=0.715588506833 C/count
   {(short)(102.14*OVERSAMPLENR), 310}, // v=0.498732997426 r=103.928860767 res=0.694467188559 C/count
   {(short)(105.05*OVERSAMPLENR), 308}, // v=0.512934286286 r=107.226501958 res=0.673992859022 C/count
   {(short)(108.05*OVERSAMPLENR), 306}, // v=0.527569014895 r=110.646701452 res=0.654149230745 C/count
   {(short)(111.13*OVERSAMPLENR), 304}, // v=0.542649676232 r=114.194613242 res=0.634920348812 C/count
   {(short)(114.32*OVERSAMPLENR), 302}, // v=0.558188995528 r=117.875631646 res=0.616290587894 C/count
   {(short)(117.60*OVERSAMPLENR), 300}, // v=0.574199921775 r=121.695403567 res=0.598244649264 C/count
   {(short)(120.97*OVERSAMPLENR), 298}, // v=0.590695617757 r=125.659841423 res=0.580767557775 C/count
   {(short)(124.45*OVERSAMPLENR), 296}, // v=0.60768944852 r=129.775136806 res=0.563844658836 C/count
   {(short)(128.04*OVERSAMPLENR), 294}, // v=0.625194968136 r=134.047774893 res=0.547461615368 C/count
   {(short)(131.73*OVERSAMPLENR), 292}, // v=0.643225904675 r=138.484549666 res=0.531604404761 C/count
   {(short)(135.54*OVERSAMPLENR), 290}, // v=0.661796143238 r=143.092579983 res=0.516259315814 C/count
   {(short)(139.45*OVERSAMPLENR), 288}, // v=0.680919706945 r=147.879326564 res=0.501412945693 C/count
   {(short)(143.49*OVERSAMPLENR), 286}, // v=0.700610735742 r=152.852609925 res=0.487052196879 C/count
   {(short)(147.64*OVERSAMPLENR), 284}, // v=0.720883462914 r=158.020629341 res=0.473164274136 C/count
   {(short)(151.91*OVERSAMPLENR), 282}, // v=0.741752189165 r=163.391982887 res=0.459736681487 C/count
   {(short)(156.31*OVERSAMPLENR), 280}, // v=0.763231254146 r=168.975688628 res=0.446757219213 C/count
   {(short)(160.84*OVERSAMPLENR), 278}, // v=0.78533500531 r=174.781207026 res=0.434213980872 C/count
   {(short)(165.49*OVERSAMPLENR), 276}, // v=0.808077763976 r=180.81846464 res=0.422095350348 C/count
   {(short)(170.29*OVERSAMPLENR), 274}, // v=0.83147378848 r=187.097879207 res=0.410389998931 C/count
   {(short)(175.21*OVERSAMPLENR), 272}, // v=0.855537234316 r=193.63038617 res=0.399086882436 C/count
   {(short)(180.28*OVERSAMPLENR), 270}, // v=0.880282111167 r=200.427466772 res=0.388175238363 C/count
   {(short)(185.49*OVERSAMPLENR), 268}, // v=0.905722236735 r=207.501177785 res=0.377644583108 C/count
   {(short)(190.85*OVERSAMPLENR), 266}, // v=0.931871187301 r=214.864183002 res=0.367484709226 C/count
   {(short)(196.35*OVERSAMPLENR), 264}, // v=0.95874224495 r=222.529786584 res=0.357685682745 C/count
   {(short)(202.00*OVERSAMPLENR), 262}, // v=0.98634834144 r=230.511968396 res=0.34823784056 C/count
   {(short)(207.81*OVERSAMPLENR), 260}, // v=1.01470199867 r=238.825421445 res=0.33913178788 C/count
   {(short)(213.77*OVERSAMPLENR), 258}, // v=1.04381526578 r=247.485591568 res=0.330358395762 C/count
   {(short)(219.89*OVERSAMPLENR), 256}, // v=1.0736996529 r=256.508719502 res=0.321908798725 C/count
   {(short)(226.17*OVERSAMPLENR), 254}, // v=1.10436606159 r=265.911885498 res=0.313774392445 C/count
   {(short)(232.62*OVERSAMPLENR), 252}, // v=1.13582471218 r=275.713056646 res=0.305946831561 C/count
   {(short)(239.22*OVERSAMPLENR), 250}, // v=1.16808506793 r=285.93113708 res=0.298418027564 C/count
   {(short)(246.00*OVERSAMPLENR), 248}, // v=1.20115575646 r=296.586021254 res=0.291180146811 C/count
   {(short)(252.94*OVERSAMPLENR), 246}, // v=1.23504448839 r=307.698650498 res=0.284225608646 C/count
   {(short)(260.05*OVERSAMPLENR), 244}, // v=1.26975797371 r=319.291073057 res=0.277547083656 C/count
   {(short)(267.33*OVERSAMPLENR), 242}, // v=1.305301836 r=331.386507861 res=0.271137492046 C/count
   {(short)(274.78*OVERSAMPLENR), 240}, // v=1.34168052499 r=344.009412255 res=0.264990002171 C/count
   {(short)(282.40*OVERSAMPLENR), 238}, // v=1.3788972278 r=357.185553971 res=0.259098029208 C/count
   {(short)(290.19*OVERSAMPLENR), 236}, // v=1.41695377941 r=370.942087617 res=0.253455233994 C/count
   {(short)(298.16*OVERSAMPLENR), 234}, // v=1.45585057286 r=385.307635985 res=0.248055522035 C/count
   {(short)(306.30*OVERSAMPLENR), 232}, // v=1.49558646973 r=400.312376519 res=0.242893042693 C/count
   {(short)(314.61*OVERSAMPLENR), 230}, // v=1.53615871164 r=415.988133278 res=0.237962188569 C/count
   {(short)(323.08*OVERSAMPLENR), 228}, // v=1.57756283339 r=432.368474769 res=0.233257595089 C/count
   {(short)(331.73*OVERSAMPLENR), 226}, // v=1.61979257858 r=449.488818077 res=0.22877414031 C/count
   {(short)(340.55*OVERSAMPLENR), 224}, // v=1.6628398184 r=467.386539686 res=0.22450694495 C/count
   {(short)(349.53*OVERSAMPLENR), 222}, // v=1.70669447455 r=486.101093493 res=0.220451372674 C/count
   {(short)(358.68*OVERSAMPLENR), 220}, // v=1.75134444716 r=505.674136488 res=0.216603030628 C/count
   {(short)(367.98*OVERSAMPLENR), 218}, // v=1.79677554854 r=526.14966265 res=0.212957770255 C/count
   {(short)(377.44*OVERSAMPLENR), 216}, // v=1.84297144386 r=547.574145623 res=0.209511688408 C/count
   {(short)(387.05*OVERSAMPLENR), 214}, // v=1.88991359955 r=569.996690807 res=0.206261128762 C/count
   {(short)(396.82*OVERSAMPLENR), 212}, // v=1.93758124054 r=593.469197513 res=0.203202683572 C/count
   {(short)(406.72*OVERSAMPLENR), 210}, // v=1.98595131711 r=618.046531904 res=0.200333195767 C/count
   {(short)(416.77*OVERSAMPLENR), 208}, // v=2.03499848247 r=643.786711499 res=0.197649761429 C/count
   {(short)(426.95*OVERSAMPLENR), 206}, // v=2.08469508179 r=670.751102055 res=0.19514973266 C/count
   {(short)(437.25*OVERSAMPLENR), 204}, // v=2.13501115357 r=699.004627732 res=0.192830720877 C/count
   {(short)(447.68*OVERSAMPLENR), 202}, // v=2.18591444419 r=728.615995494 res=0.190690600551 C/count
   {(short)(458.21*OVERSAMPLENR), 200}, // v=2.2373704361 r=759.657934777 res=0.188727513426 C/count
   {(short)(468.86*OVERSAMPLENR), 198}, // v=2.2893423905 r=792.207453559 res=0.186939873243 C/count
   {(short)(479.60*OVERSAMPLENR), 196}, // v=2.34179140472 r=826.34611201 res=0.185326371014 C/count
   {(short)(490.43*OVERSAMPLENR), 194}, // v=2.39467648473 r=862.160315027 res=0.183885980856 C/count
   {(short)(501.34*OVERSAMPLENR), 192}, // v=2.447954633 r=899.74162507 res=0.182617966458 C/count
   {(short)(512.32*OVERSAMPLENR), 190}, // v=2.50158095159 r=939.187096773 res=0.18152188819 C/count
   {(short)(523.37*OVERSAMPLENR), 188}, // v=2.55550876042 r=980.599634994 res=0.180597610919 C/count
   {(short)(534.46*OVERSAMPLENR), 186}, // v=2.60968973035 r=1024.08837804 res=0.179845312567 C/count
   {(short)(545.60*OVERSAMPLENR), 184}, // v=2.66407403055 r=1069.76910798 res=0.179265493467 C/count
   {(short)(556.77*OVERSAMPLENR), 182}, // v=2.71861048952 r=1117.7646901 res=0.178858986574 C/count
   {(short)(567.96*OVERSAMPLENR), 180}, // v=2.77324676877 r=1168.20554367 res=0.178626968578 C/count
   {(short)(579.16*OVERSAMPLENR), 178}, // v=2.82792954818 r=1221.23014655 res=0.178570972005 C/count
   {(short)(590.36*OVERSAMPLENR), 176}, // v=2.88260472182 r=1276.98557607 res=0.17869289834 C/count
   {(short)(601.54*OVERSAMPLENR), 174}, // v=2.93721760279 r=1335.6280891 res=0.178995032286 C/count
   {(short)(612.70*OVERSAMPLENR), 172}, // v=2.99171313554 r=1397.32374433 res=0.179480057201 C/count
   {(short)(623.83*OVERSAMPLENR), 170}, // v=3.04603611411 r=1462.24907004 res=0.180151071825 C/count
   {(short)(634.91*OVERSAMPLENR), 168}, // v=3.10013140435 r=1530.59178089 res=0.181011608375 C/count
   {(short)(645.93*OVERSAMPLENR), 166}, // v=3.15394416847 r=1602.55154773 res=0.182065652118 C/count
   {(short)(656.88*OVERSAMPLENR), 164}, // v=3.20742008985 r=1678.34082445 res=0.183317662517 C/count
   {(short)(667.75*OVERSAMPLENR), 162}, // v=3.26050559629 r=1758.18573649 res=0.184772596078 C/count
   {(short)(678.53*OVERSAMPLENR), 160}, // v=3.31314807964 r=1842.32703605 res=0.186435931024 C/count
   {(short)(689.21*OVERSAMPLENR), 158}, // v=3.36529611009 r=1931.02112911 res=0.188313693926 C/count
   {(short)(699.78*OVERSAMPLENR), 156}, // v=3.41689964307 r=2024.54118033 res=0.190412488444 C/count
   {(short)(710.23*OVERSAMPLENR), 154}, // v=3.46791021712 r=2123.17830195 res=0.192739526335 C/count
   {(short)(720.54*OVERSAMPLENR), 152}, // v=3.51828114101 r=2227.24283371 res=0.195302660912 C/count
   {(short)(730.72*OVERSAMPLENR), 150}, // v=3.5679676686 r=2337.06572105 res=0.198110423132 C/count
   {(short)(740.75*OVERSAMPLENR), 148}, // v=3.61692716013 r=2453.0 res=0.201172060518 C/count
   {(short)(750.62*OVERSAMPLENR), 146}, // v=3.66511922855 r=2575.42239721 res=0.204497579152 C/count
   {(short)(760.32*OVERSAMPLENR), 144}, // v=3.71250587016 r=2704.73505508 res=0.208097788969 C/count
   {(short)(769.85*OVERSAMPLENR), 142}, // v=3.75905157842 r=2841.36739227 res=0.211984352611 C/count
   {(short)(779.21*OVERSAMPLENR), 140}, // v=3.80472344067 r=2985.77811094 res=0.216169838151 C/count
   {(short)(788.38*OVERSAMPLENR), 138}, // v=3.84949121702 r=3138.45736335 res=0.220667775973 C/count
   {(short)(797.35*OVERSAMPLENR), 136}, // v=3.8933274014 r=3299.92909117 res=0.225492720163 C/count
   {(short)(806.14*OVERSAMPLENR), 134}, // v=3.93620726486 r=3470.75355234 res=0.230660314787 C/count
   {(short)(814.72*OVERSAMPLENR), 132}, // v=3.97810888103 r=3651.53005163 res=0.236187365438 C/count
   {(short)(823.09*OVERSAMPLENR), 130}, // v=4.01901313447 r=3842.89989256 res=0.242091916532 C/count
   {(short)(831.26*OVERSAMPLENR), 128}, // v=4.05890371222 r=4045.5495697 res=0.248393334799 C/count
   {(short)(839.22*OVERSAMPLENR), 126}, // v=4.0977670794 r=4260.21422265 res=0.255112399517 C/count
   {(short)(846.97*OVERSAMPLENR), 124}, // v=4.13559243967 r=4487.68137446 res=0.262271400074 C/count
   {(short)(854.50*OVERSAMPLENR), 122}, // v=4.17237168156 r=4728.7949797 res=0.269894241472 C/count
   {(short)(861.82*OVERSAMPLENR), 120}, // v=4.20809931166 r=4984.45980976 res=0.278006558483 C/count
   {(short)(868.92*OVERSAMPLENR), 118}, // v=4.24277237599 r=5255.64620533 res=0.286635839214 C/count
   {(short)(875.80*OVERSAMPLENR), 116}, // v=4.27639037057 r=5543.39522917 res=0.29581155892 C/count
   {(short)(882.47*OVERSAMPLENR), 114}, // v=4.30895514256 r=5848.82425534 res=0.305565324977 C/count
   {(short)(888.93*OVERSAMPLENR), 112}, // v=4.3404707833 r=6173.13303434 res=0.315931034041 C/count
   {(short)(895.17*OVERSAMPLENR), 110}, // v=4.37094351432 r=6517.61027793 res=0.326945042485 C/count
   {(short)(901.20*OVERSAMPLENR), 108}, // v=4.40038156785 r=6883.64081108 res=0.338646351367 C/count
   {(short)(907.02*OVERSAMPLENR), 106}, // v=4.42879506278 r=7272.71334361 res=0.351076807258 C/count
   {(short)(912.63*OVERSAMPLENR), 104}, // v=4.45619587755 r=7686.42891909 res=0.364281320447 C/count
   {(short)(918.04*OVERSAMPLENR), 102}, // v=4.48259752087 r=8126.51010417 res=0.378308102151 C/count
   {(short)(923.24*OVERSAMPLENR), 100}, // v=4.50801500147 r=8594.81098808 res=0.39320892259 C/count
   {(short)(928.25*OVERSAMPLENR), 98}, // v=4.53246469782 r=9093.3280689 res=0.409039391926 C/count
   {(short)(933.06*OVERSAMPLENR), 96}, // v=4.55596422882 r=9624.21211075 res=0.425859266334 C/count
   {(short)(937.68*OVERSAMPLENR), 94}, // v=4.5785323262 r=10189.781065 res=0.443732781695 C/count
   {(short)(942.12*OVERSAMPLENR), 92}, // v=4.60018870949 r=10792.5341578 res=0.462729017697 C/count
   {(short)(946.37*OVERSAMPLENR), 90}, // v=4.62095396412 r=11435.1672568 res=0.482922295434 C/count
   {(short)(950.45*OVERSAMPLENR), 88}, // v=4.64084942336 r=12120.5896418 res=0.504392611971 C/count
   {(short)(954.35*OVERSAMPLENR), 86}, // v=4.65989705451 r=12851.9423166 res=0.527226115716 C/count
   {(short)(958.08*OVERSAMPLENR), 84}, // v=4.67811934982 r=13632.6180146 res=0.551515626948 C/count
   {(short)(961.65*OVERSAMPLENR), 82}, // v=4.69553922242 r=14466.2830648 res=0.577361208306 C/count
   {(short)(965.05*OVERSAMPLENR), 80}, // v=4.71217990757 r=15356.9013059 res=0.604870790723 C/count
   {(short)(968.31*OVERSAMPLENR), 78}, // v=4.7280648695 r=16308.7602526 res=0.634160860878 C/count
   {(short)(971.41*OVERSAMPLENR), 76}, // v=4.74321771379 r=17326.4997414 res=0.665357217092 C/count
   {(short)(974.37*OVERSAMPLENR), 74}, // v=4.75766210559 r=18415.1433098 res=0.698595801435 C/count
   {(short)(977.19*OVERSAMPLENR), 72}, // v=4.77142169346 r=19580.132587 res=0.734023616863 C/count
   {(short)(979.87*OVERSAMPLENR), 70}, // v=4.78452003912 r=20827.3650062 res=0.771799739364 C/count
   {(short)(982.42*OVERSAMPLENR), 68}, // v=4.79698055266 r=22163.2351844 res=0.812096436467 C/count
   {(short)(984.85*OVERSAMPLENR), 66}, // v=4.80882643343 r=23594.6803493 res=0.855100405046 C/count
   {(short)(987.15*OVERSAMPLENR), 64}, // v=4.82008061629 r=25129.2302416 res=0.901014143176 C/count
   {(short)(989.34*OVERSAMPLENR), 62}, // v=4.83076572317 r=26775.0619621 res=0.950057472948 C/count
   {(short)(991.42*OVERSAMPLENR), 60}, // v=4.84090401955 r=28541.0602924 res=1.00246923363 C/count
   {(short)(993.39*OVERSAMPLENR), 58}, // v=4.85051737596 r=30436.8840726 res=1.05850916754 C/count
   {(short)(995.25*OVERSAMPLENR), 56}, // v=4.85962723401 r=32473.0392914 res=1.11846002434 C/count
   {(short)(997.02*OVERSAMPLENR), 54}, // v=4.86825457679 r=34660.9596139 res=1.18262991365 C/count
   {(short)(998.69*OVERSAMPLENR), 52}, // v=4.87641990356 r=37013.0951617 res=1.2513549407 C/count
   {(short)(1000.27*OVERSAMPLENR), 50}, // v=4.88414320819 r=39543.0104512 res=1.32500216534 C/count
   {(short)(1001.77*OVERSAMPLENR), 48}, // v=4.8914439614 r=42265.4925047 res=1.40397293172 C/count
   {(short)(1003.18*OVERSAMPLENR), 46}, // v=4.89834109634 r=45196.670268 res=1.48870662422 C/count
   {(short)(1004.51*OVERSAMPLENR), 44}, // v=4.90485299742 r=48354.1466033 res=1.57968491494 C/count
   {(short)(1005.77*OVERSAMPLENR), 42}, // v=4.910997492 r=51757.1442782 res=1.67743658033 C/count
   {(short)(1006.96*OVERSAMPLENR), 40}, // v=4.91679184489 r=55426.6675452 res=1.78254297881 C/count
   {(short)(1008.08*OVERSAMPLENR), 38}, // v=4.92225275522 r=59385.6810965 res=1.89564429945 C/count
   {(short)(1009.13*OVERSAMPLENR), 36}, // v=4.92739635573 r=63659.3084007 res=2.01744671338 C/count
   {(short)(1010.12*OVERSAMPLENR), 34}, // v=4.93223821394 r=68275.0516751 res=2.14873058711 C/count
   {(short)(1011.06*OVERSAMPLENR), 32}, // v=4.93679333536 r=73263.0360254 res=2.29035995011 C/count
   {(short)(1011.93*OVERSAMPLENR), 30}, // v=4.94107616823 r=78656.2806046 res=2.44329345196 C/count
   {(short)(1012.76*OVERSAMPLENR), 28}, // v=4.94510060986 r=84491.0 res=2.60859709672 C/count
   {(short)(1013.53*OVERSAMPLENR), 26}, // v=4.94888001423 r=90806.9394668 res=2.78745911018 C/count
   {(short)(1014.26*OVERSAMPLENR), 24}, // v=4.95242720078 r=97647.748088 res=2.98120738167 C/count
   {(short)(1014.94*OVERSAMPLENR), 22}, // v=4.95575446423 r=105061.394468 res=3.19133003266 C/count
   {(short)(1015.58*OVERSAMPLENR), 20}, // v=4.95887358527 r=113100.630168 res=3.41949980923 C/count
   {(short)(1016.18*OVERSAMPLENR), 18}, // v=4.961795842 r=121823.50676 res=3.66760318356 C/count
   {(short)(1016.74*OVERSAMPLENR), 16}, // v=4.96453202205 r=131293.95318 res=3.93777530023 C/count
   {(short)(1017.26*OVERSAMPLENR), 14}, // v=4.96709243511 r=141582.420912 res=4.2324422368 C/count
   {(short)(1017.75*OVERSAMPLENR), 12}, // v=4.96948692603 r=152766.605571 res=4.55437250034 C/count
   {(short)(1018.21*OVERSAMPLENR), 10}, // v=4.97172488816 r=164932.254604 res=4.90674029979 C/count
   {(short)(1018.64*OVERSAMPLENR), 8}, // v=4.97381527697 r=178174.072135 res=5.29320399148 C/count
   {(short)(1019.04*OVERSAMPLENR), 6}, // v=4.97576662383 r=192596.733519 res=5.7180043009 C/count
   {(short)(1019.41*OVERSAMPLENR), 4}, // v=4.97758704988 r=208316.023881 res=6.18608864599 C/count
   {(short)(1019.76*OVERSAMPLENR), 2}, // v=4.97928427999 r=225460.11692 res=6.70327038939 C/count
   {(short)(1020.08*OVERSAMPLENR), 0}  // v=4.98086565667 r=244171.012543 res=7.27643555088 C/count
     };
#endif


#define _TT_NAME(_N) temptable_ ## _N
#define TT_NAME(_N) _TT_NAME(_N)

#ifdef THERMISTORHEATER_0
# define HEATER_0_TEMPTABLE TT_NAME(THERMISTORHEATER_0)
# define HEATER_0_TEMPTABLE_LEN (sizeof(HEATER_0_TEMPTABLE)/sizeof(*HEATER_0_TEMPTABLE))
#else
# ifdef HEATER_0_USES_THERMISTOR
#  error No heater 0 thermistor table specified
# else  // HEATER_0_USES_THERMISTOR
#  define HEATER_0_TEMPTABLE NULL
#  define HEATER_0_TEMPTABLE_LEN 0
# endif // HEATER_0_USES_THERMISTOR
#endif

//Set the high and low raw values for the heater, this indicates which raw value is a high or low temperature
#ifndef HEATER_0_RAW_HI_TEMP
# ifdef HEATER_0_USES_THERMISTOR   //In case of a thermistor the highest temperature results in the lowest ADC value
#  define HEATER_0_RAW_HI_TEMP 0
#  define HEATER_0_RAW_LO_TEMP 16383
# else                          //In case of an thermocouple the highest temperature results in the highest ADC value
#  define HEATER_0_RAW_HI_TEMP 16383
#  define HEATER_0_RAW_LO_TEMP 0
# endif
#endif

#ifdef THERMISTORHEATER_1
# define HEATER_1_TEMPTABLE TT_NAME(THERMISTORHEATER_1)
# define HEATER_1_TEMPTABLE_LEN (sizeof(HEATER_1_TEMPTABLE)/sizeof(*HEATER_1_TEMPTABLE))
#else
# ifdef HEATER_1_USES_THERMISTOR
#  error No heater 1 thermistor table specified
# else  // HEATER_1_USES_THERMISTOR
#  define HEATER_1_TEMPTABLE NULL
#  define HEATER_1_TEMPTABLE_LEN 0
# endif // HEATER_1_USES_THERMISTOR
#endif

//Set the high and low raw values for the heater, this indicates which raw value is a high or low temperature
#ifndef HEATER_1_RAW_HI_TEMP
# ifdef HEATER_1_USES_THERMISTOR   //In case of a thermistor the highest temperature results in the lowest ADC value
#  define HEATER_1_RAW_HI_TEMP 0
#  define HEATER_1_RAW_LO_TEMP 16383
# else                          //In case of an thermocouple the highest temperature results in the highest ADC value
#  define HEATER_1_RAW_HI_TEMP 16383
#  define HEATER_1_RAW_LO_TEMP 0
# endif
#endif

#ifdef THERMISTORHEATER_2
# define HEATER_2_TEMPTABLE TT_NAME(THERMISTORHEATER_2)
# define HEATER_2_TEMPTABLE_LEN (sizeof(HEATER_2_TEMPTABLE)/sizeof(*HEATER_2_TEMPTABLE))
#else
# ifdef HEATER_2_USES_THERMISTOR
#  error No heater 2 thermistor table specified
# else  // HEATER_2_USES_THERMISTOR
#  define HEATER_2_TEMPTABLE NULL
#  define HEATER_2_TEMPTABLE_LEN 0
# endif // HEATER_2_USES_THERMISTOR
#endif

//Set the high and low raw values for the heater, this indicates which raw value is a high or low temperature
#ifndef HEATER_2_RAW_HI_TEMP
# ifdef HEATER_2_USES_THERMISTOR   //In case of a thermistor the highest temperature results in the lowest ADC value
#  define HEATER_2_RAW_HI_TEMP 0
#  define HEATER_2_RAW_LO_TEMP 16383
# else                          //In case of an thermocouple the highest temperature results in the highest ADC value
#  define HEATER_2_RAW_HI_TEMP 16383
#  define HEATER_2_RAW_LO_TEMP 0
# endif
#endif

#ifdef THERMISTORBED
# define BEDTEMPTABLE TT_NAME(THERMISTORBED)
# define BEDTEMPTABLE_LEN (sizeof(BEDTEMPTABLE)/sizeof(*BEDTEMPTABLE))
#else
# ifdef BED_USES_THERMISTOR
#  error No bed thermistor table specified
# endif // BED_USES_THERMISTOR
#endif

//Set the high and low raw values for the heater, this indicates which raw value is a high or low temperature
#ifndef HEATER_BED_RAW_HI_TEMP
# ifdef BED_USES_THERMISTOR   //In case of a thermistor the highest temperature results in the lowest ADC value
#  define HEATER_BED_RAW_HI_TEMP 0
#  define HEATER_BED_RAW_LO_TEMP 16383
# else                          //In case of an thermocouple the highest temperature results in the highest ADC value
#  define HEATER_BED_RAW_HI_TEMP 16383
#  define HEATER_BED_RAW_LO_TEMP 0
# endif
#endif

#endif //THERMISTORTABLES_H_
